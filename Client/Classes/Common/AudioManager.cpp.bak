#include "AudioManager.h"
#include "AudioEngine.h"
#include "GameScene\GameDataManager.h"

AudioManager::AudioManager()
{

}

AudioManager::~AudioManager()
{
	Clear();
}

AudioPlayer* AudioManager::Load(const string& key)
{
	AudioPlayers::iterator itr = m_AudioPlayers.find(key);
	if ( itr != m_AudioPlayers.end() )
	{
		return itr->second;
	}

	Data ret = gFileUtils->getDataFromFile(key);
	if ( !ret.isNull() )
	{
		AudioPlayer* pPlayer = AudioEngine::GetInterface()->GetAudioPlayer(ret.getBytes(),ret.getSize());
		if ( pPlayer )
		{
			m_AudioPlayers[key] = pPlayer;
		}
		return pPlayer;
	}

	return NULL;
}

void AudioManager::Play(const int& id,bool once /* = true */)
{
	AudioCfg* pCfg = AudioData.get(id);
	if(!pCfg) return;
	Play(pCfg->file,once);
}
void AudioManager::Play(const string& file,bool once)
{
	AudioPlayer* pPlayer = Load(file);
	if ( pPlayer )
	{
		pPlayer->Loop(!once);
		pPlayer->Play();
	}
}

void AudioManager::Stop(const int& id)
{
	AudioCfg* pCfg = AudioData.get(id);
	if(!pCfg) return;
	Stop(pCfg->file);
}
void AudioManager::Stop(const string& file)
{
	AudioPlayer* pPlayer = Load(file);
	if ( pPlayer )
	{
		pPlayer->Stop();
	}
}

void AudioManager::Pause(const int& id)
{
	AudioCfg* pCfg = AudioData.get(id);
	if(!pCfg) return;
	Pause(pCfg->file);
}

void AudioManager::Pause(const string& file)
{
	AudioPlayer* pPlayer = Load(file);
	if ( pPlayer )
	{
		pPlayer->Pause();
	}
}

void AudioManager::StopAll()
{
	for ( AudioPlayers::iterator itr = m_AudioPlayers.begin();itr != m_AudioPlayers.end(); ++itr )
	{
		AudioPlayer* pPlayer = itr->second;
		if ( pPlayer )
		{
			pPlayer->Stop();
		}
	}
}

void AudioManager::PauseAll()
{
	for ( AudioPlayers::iterator itr = m_AudioPlayers.begin();itr != m_AudioPlayers.end(); ++itr )
	{
		AudioPlayer* pPlayer = itr->second;
		if ( pPlayer )
		{
			pPlayer->Pause();
		}
	}
}

void AudioManager::ResumeAll()
{
	for ( AudioPlayers::iterator itr = m_AudioPlayers.begin();itr != m_AudioPlayers.end(); ++itr )
	{
		AudioPlayer* pPlayer = itr->second;
		if ( pPlayer && pPlayer->IsPaused() )
		{
			pPlayer->Play();
		}
	}
}

void AudioManager::Clear()
{
	for ( AudioPlayers::iterator itr = m_AudioPlayers.begin();itr != m_AudioPlayers.end(); ++itr )
	{
		AudioPlayer* pPlayer = itr->second;
		if ( pPlayer )
		{
			pPlayer->Stop();
			pPlayer->Release();
			delete pPlayer;
		}
	}

	m_AudioPlayers.clear();
}