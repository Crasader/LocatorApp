#include "AudioDecoder.h"

AudioDecoder::AudioDecoder() : m_iSize(0),m_iFreq(0),m_pData(NULL),m_eFormat(0)
{

}

AudioDecoder::~AudioDecoder()
{

}

void AudioDecoder::Clear()
{
	if ( m_pData )
	{
		delete m_pData;
		m_pData = NULL;
	}
	m_iSize = 0;
	m_iFreq = 0;
	m_eFormat = 0;
}

long AudioDecoder::PushData(const unsigned char* data,int size)
{
	if ( !data || size == 0 )
	{
		return 0;
	}

	size_t	newsize = m_iSize+size;
	unsigned char* pBuffer = new unsigned char[newsize];
	if ( pBuffer )
	{
		if ( m_pData )
		{
			memcpy(pBuffer,m_pData,m_iSize);
			delete m_pData;
		}
		memcpy(pBuffer+m_iSize,data,size);
		m_iSize = newsize;
		m_pData = pBuffer;
		return size;
	}

	return 0;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
AudioDecoder_WAV::AudioDecoder_WAV()
{

}

AudioDecoder_WAV::~AudioDecoder_WAV()
{

}

#define		WAVE_FORMAT_IEEE_FLOAT                 0x0003 /* Microsoft Corporation */
#define		WAVE_FORMAT_PCM							1
void AudioDecoder_WAV::SetInfo(long rate,int channels,int encoding)
{
	unsigned short bitspersample;
	unsigned short wavformat;
	if(encoding & MPG123_ENC_FLOAT_64)
	{
		bitspersample = 64;
		wavformat = WAVE_FORMAT_IEEE_FLOAT;
	}
	else if(encoding & MPG123_ENC_FLOAT_32)
	{
		bitspersample = 32;
		wavformat = WAVE_FORMAT_IEEE_FLOAT;
	}
	else if(encoding & MPG123_ENC_16)
	{
		bitspersample = 16;
		wavformat = WAVE_FORMAT_PCM;
	}
	else
	{
		bitspersample = 8;
		wavformat = WAVE_FORMAT_PCM;
	}

	if (wavformat == WAVE_FORMAT_PCM)
	{
		if (channels == 1)
		{
			switch (bitspersample)
			{
			case 4:
				m_eFormat = alGetEnumValue("AL_FORMAT_MONO_IMA4");
				break;
			case 8:
				m_eFormat = alGetEnumValue("AL_FORMAT_MONO8");
				break;
			case 16:
				m_eFormat = alGetEnumValue("AL_FORMAT_MONO16");
				break;
			default:
				break;
			}
		}
		else if (channels)
		{
			switch (bitspersample)
			{
			case 4:
				m_eFormat = alGetEnumValue("AL_FORMAT_STEREO_IMA4");
				break;
			case 8:
				m_eFormat = alGetEnumValue("AL_FORMAT_STEREO8");
				break;
			case 16:
				m_eFormat = alGetEnumValue("AL_FORMAT_STEREO16");
				break;
			default:
				break;
			}
		}
		else if ((channels == 4) && (bitspersample == 16))
		{
			m_eFormat = alGetEnumValue("AL_FORMAT_QUAD16");
		}
	}

	m_iFreq = rate;
}

bool AudioDecoder_WAV::Decode(const unsigned char* inmemory,int inmemsize)
{
	if ( !inmemory || inmemsize == 0 )
	{
		return false;
	}

	int ret = 0;
	mpg123_handle* h = ::mpg123_new(NULL, &ret);//创建对象 
	::mpg123_param(h, MPG123_VERBOSE, 2, 0);//解码设置
	::mpg123_param(h, MPG123_ADD_FLAGS,MPG123_QUIET,0);
	::mpg123_open_feed(h);

	ret = ::mpg123_feed(h,inmemory,inmemsize);
	if ( ret != MPG123_OK )
	{
		return false;
	}

	Clear();

	while( ret == MPG123_OK )
	{
		off_t num;
		unsigned char *audio=NULL;
		size_t audiosize=0;
		ret = ::mpg123_decode_frame(h, &num, &audio, &audiosize);
		if ( ret == MPG123_ERR )
		{
			break;
		}

		if( ret == MPG123_NEW_FORMAT )
		{
			long rate=0;
			int channels=0;
			int enc=0;
			ret = ::mpg123_getformat(h, &rate, &channels, &enc);
			if ( ret == MPG123_ERR )
			{
				break;
			}
			SetInfo(rate,channels,enc);
		}
		else
		{
			PushData(audio,audiosize);
		}
	}

	char buf[256] = "";
	if(ret == MPG123_ERR)
	{
		sprintf(buf, "Error: %s", mpg123_strerror(h));
	}

	mpg123_close(h);
	mpg123_delete(h); 

	return ret != MPG123_ERR;
}